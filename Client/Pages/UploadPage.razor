@page "/upload"
@using System.Collections.ObjectModel
@inject ISnackbar Snackbar
@inject IDialogService DialogService



<MudContainer Fixed Class="px-6 py-4">

    <MudStack Spacing="0" Class="pb-4">
        <MudStack Row>
            <MudIcon Icon="@Icons.Material.Filled.CloudUpload" Size="Size.Large"></MudIcon>
            <MudText Typo="Typo.h1" Color="Color.Dark">Upload Meter Data</MudText>
        </MudStack>

        <MudText Typo="Typo.h2" Class="mud-text-secondary">Upload meter data in a variety of formats.</MudText>
    </MudStack>



    <div style="display:@( ( _state == internalState.GetFiles ? "block" : "none") )">

        <MudContainer MaxWidth="MaxWidth.Medium">
            <UploadPageGetFiles OnFilesSelected="OnFilesSelected" />
        </MudContainer>

    </div>

    @if (_state == internalState.UploadFiles)
    {
        <MudContainer MaxWidth="MaxWidth.ExtraLarge">

            <MudDataGrid ReadOnly="true" Items="@_items" Height="50vh" Virtualize Bordered Dense Striped HorizontalScrollbar>
                <Columns>
                    <PropertyColumn Property="zz=>zz.FileName" Title="File" />
                    <PropertyColumn Property="zz=>zz.FileSizeFormatted" Title="Size" />
                    <PropertyColumn Property="zz=>zz.FileType" Title="Type" />
                    <TemplateColumn Title="Loading" T="MeterDataFile">
                        <CellTemplate>
                            @if (context.Item.InProgress)
                            {
                                <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                            }
                            else if (!context.Item.Parsed)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Pending" Size="Size.Small" Color="Color.Primary"></MudIcon>

                            }

                            else if (context.Item.Success)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" Color="Color.Success"></MudIcon>

                            }
                            else
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Small" Color="Color.Error"></MudIcon>
                            }
                        </CellTemplate>
                    </TemplateColumn>



                    <PropertyColumn Property="zz=>zz.ProcessingStatus" Title="Status" />
                    <PropertyColumn Property="zz=>zz.Errors" Title="Errors" />
                    <PropertyColumn Property="zz=>zz.SiteName" Title="Sites" />
                    <PropertyColumn Property="zz=>zz.Days" Title="Days" />
                    <PropertyColumn Property="zz=>zz.DataPoints" Title="Data Points" />

                </Columns>
            </MudDataGrid>
        </MudContainer>
    }


</MudContainer>

@code {

    enum internalState
    {
        GetFiles,
        UploadFiles
    }
    internalState _state = internalState.GetFiles;


    ObservableCollection<MeterDataFile> _items = new ObservableCollection<MeterDataFile>();

    async Task OnFilesSelected(IReadOnlyList<IBrowserFile> files)
    {
        _items = new ObservableCollection<MeterDataFile>(files.Select(f => new MeterDataFile(f)));
        _state = internalState.UploadFiles;
        await InvokeAsync(StateHasChanged);
        foreach (MeterDataFile file in _items)
        {
            try
            {
                await file.Parse(UpdateProgress);
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }

        foreach (MeterDataFile file in _items.Where(zz => zz.HasUnknownSites))
        {
            try
            {
                var options = new DialogOptions { CloseOnEscapeKey = true };
                var diagParams = new DialogParameters<UploadPageDialogGetSiteName>
                {
                    { "Filename", file.FileName }
                };
                IDialogReference diagRef = await  DialogService.ShowAsync<UploadPageDialogGetSiteName>("Name Site", diagParams, options);

                var siteName = await diagRef.GetReturnValueAsync<string>();

                if (!string.IsNullOrWhiteSpace(siteName))
                {
                    Console.WriteLine($"Setting site name to {siteName}");
                    file.ParserResult?.SetUnknownSiteName(siteName);
                    await InvokeAsync(StateHasChanged);
                }

            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }



    }

    async Task UpdateProgress()
    {

        await InvokeAsync(StateHasChanged);
        await Task.Delay(1);

    }








}
