@page "/GraphDemand"
@page "/GraphDemand/{siteId}"
@inject MeterKloudClientApi API
@inject NavigationManager NavigationManager
@using Plotly.Blazor.LayoutLib.XAxisLib
@using Plotly.Blazor.Traces.ScatterLib
@using Site = MeterDataLib.Site;


<MudText Typo="Typo.h1">@SitesName()</MudText>

@if (_pageState == PageStateValue.Error)
{
    <MudAlert Icon="" Severity="Severity.Error">[8TSAL9] Error - could not load the requested site</MudAlert>

}
else if (_pageState == PageStateValue.Loading)
{
    <MudProgressCircular Indeterminate="true" />
}


<MudPaper Elevation="25" Height="50vh" Outlined>

    @if (_pageState == PageStateValue.Loaded)
    {
        <ErrorBoundary>
            <ChildContent>
                <PlotlyChart @bind-Config="_config" @bind-Layout="_layout" @bind-Data="_data" @ref="_chart" />
            </ChildContent>
            <ErrorContent>
                <MudAlert Icon="" Severity="Severity.Error">[8TSAL9] Error - Could not render chart</MudAlert>
            </ErrorContent>
        </ErrorBoundary>
    }

</MudPaper>






@code {

    [Parameter]
    public string? SiteId { get; set; }

    [SupplyParameterFromQuery(Name = "Code")]
    public string? SiteCode { get; set; }

    Site? _site;
    PlotlyChart _chart = default!;
    IList<ITrace> _data = new List<ITrace>();
    Config _config = new Config();
    Layout _layout = new Layout();


    private enum PageStateValue
    {
        Loading,
        Loaded,
        Error
    }

    private PageStateValue _pageState = PageStateValue.Loading;


    public string SitesName()
    {
        if (_site != null)
        {
            if (!string.IsNullOrWhiteSpace(_site.Name) && !_site.Name.Equals(_site.Code, StringComparison.OrdinalIgnoreCase))
            {
                return $"Site:  {_site.Code} - {_site.Name}";
            }
            else
            {
                return $"Site:  {_site.Code}";
            }
        }
        if (_pageState == PageStateValue.Loading)
        {
            return "Loading...";
        }
        if (!string.IsNullOrWhiteSpace(SiteId))
        {
            return "SiteId: " + SiteId;
        }
        if (!string.IsNullOrWhiteSpace(SiteCode))
        {
            return "SiteCode: " + SiteCode;
        }
        return "Unknown";
    }


    protected override async Task OnParametersSetAsync()
    {
        _site = null;
        _pageState = PageStateValue.Loading;
        if (SiteId != null)
        {
            var site = await API.GetSite(SiteId);
            _site = site;
        }
        else if (SiteCode != null)
        {
            var site = await API.GetSiteByCode(SiteCode);
            if (site != null)
            {
                NavigationManager.NavigateTo($"/GraphDemand/{site.Id}");
            }
        }
        else if (_site == null && SiteId == null)
        {
            var site = await API.GetLastSiteAccessed();
            if (site != null)
            {
                NavigationManager.NavigateTo($"/GraphDemand/{site.Id}");
            }
        }

        if (_site != null)
        {

            var dailyTotals = await API.GetDailyDemand(_site.Id);
            if (dailyTotals.AnyKva() == false)
            {
                var trace = new Bar
                    {
                        X = dailyTotals.X,
                        Y = dailyTotals.Y_kW,
                        TextArray = dailyTotals.DemandLabels(),
                        HoverTemplate = "%{text}<extra></extra>",
                        
                    };
                this._data = new List<ITrace> { trace };

                this._layout = new Layout
                    {
                        Title = new Plotly.Blazor.LayoutLib.Title() { Text = $"Demand" },
                        BarMode = Plotly.Blazor.LayoutLib.BarModeEnum.Stack,
                        YAxis = new[] {
                        new Plotly.Blazor.LayoutLib.YAxis  { Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title() { Text = "kW/kVa" } },
                    },

                    };
            }
            else
            {
                var traceKw = new Bar
                    {
                        X = dailyTotals.X,
                        Y = dailyTotals.Y_kW,
                        TextArray = dailyTotals.DemandLabels(),
                        Name = "max kW",
                        HoverTemplate = "%{text}<extra></extra>",
                        TextPosition = Plotly.Blazor.Traces.BarLib.TextPositionEnum.Auto,
                    };

                var traceKva = new Bar
                    {
                        X = dailyTotals.X,
                        Y = dailyTotals.Y_kVA_Diff(),
                        TextArray = dailyTotals.DemandLabels(),
                        Name = "max kVA", 
                        HoverTemplate = "%{text}<extra></extra>",
                        TextPosition = Plotly.Blazor.Traces.BarLib.TextPositionEnum.None,
                    };


                var tracePf = new Scatter
                    {
                        X = dailyTotals.X,
                        Y = dailyTotals.Y_Pf,
                        TextArray = dailyTotals.DemandLabels(),
                        Name = "Power Factor",
                        HoverTemplate = "%{text}<extra></extra>",
                        YAxis = "y2",
                        Marker = new Plotly.Blazor.Traces.ScatterLib.Marker() { Color = "rgba(255, 182, 193, 0.7)" },
                        
                        
                    };

                
                this._data = new List<ITrace> { traceKw , traceKva, tracePf};

                this._layout = new Layout
                    {
                        Title = new Plotly.Blazor.LayoutLib.Title() { Text = $"Demand" },
                        BarMode = Plotly.Blazor.LayoutLib.BarModeEnum.Stack,
                        YAxis = new[] {
                        new Plotly.Blazor.LayoutLib.YAxis  { Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title() { Text = "kW/kVa" } },
                        new Plotly.Blazor.LayoutLib.YAxis  { Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title() { Text = "Pf" }, Overlaying="y",  Side = Plotly.Blazor.LayoutLib.YAxisLib.SideEnum.Right }
                    },

                    };


            }




            _pageState = PageStateValue.Loaded;

        }
        else
        {
            _pageState = PageStateValue.Error;
        }

    }


    // Using of the interface IList is important for the event callback!

}
