@page "/GraphProfileConsumption"
@page "/GraphProfileConsumption/{siteId}"
@inject MeterKloudClientApi API
@inject NavigationManager NavigationManager
@using MeterDataLib.Query
@using Plotly.Blazor.LayoutLib.XAxisLib
@using Plotly.Blazor.Traces.ScatterLib
@using Site = MeterDataLib.Site;


<MudText Typo="Typo.h1">@SitesName()</MudText>

@if (_pageState == PageStateValue.Error)
{
    <MudAlert Icon="" Severity="Severity.Error">[8TSAL9] Error - could not load the requested site</MudAlert>

}
else if (_pageState == PageStateValue.Loading)
{
    <MudProgressCircular Indeterminate="true" />
}


<MudPaper Elevation="25" Height="90vh" Outlined>

    @if (_pageState == PageStateValue.Loaded)
    {
        <ErrorBoundary>
            <ChildContent>
                <PlotlyChart @bind-Config="_config" @bind-Layout="_layout" @bind-Data="_data" @ref="_chart" />
            </ChildContent>
            <ErrorContent>
                <MudAlert Icon="" Severity="Severity.Error">[8TSAL9] Error - Could not render chart</MudAlert>
            </ErrorContent>
        </ErrorBoundary>
    }

</MudPaper>






@code {

    [Parameter]
    public string? SiteId { get; set; }

    [SupplyParameterFromQuery(Name = "Code")]
    public string? SiteCode { get; set; }

    Site? _site;
    PlotlyChart _chart = default!;
    IList<ITrace> _data = new List<ITrace>();
    Config _config = new Config();
    Layout _layout = new Layout();


    private enum PageStateValue
    {
        Loading,
        Loaded,
        Error
    }

    private PageStateValue _pageState = PageStateValue.Loading;


    public string SitesName()
    {
        if (_site != null)
        {
            if (!string.IsNullOrWhiteSpace(_site.Name) && !_site.Name.Equals(_site.Code, StringComparison.OrdinalIgnoreCase))
            {
                return $"Site:  {_site.Code} - {_site.Name}";
            }
            else
            {
                return $"Site:  {_site.Code}";
            }
        }
        if (_pageState == PageStateValue.Loading)
        {
            return "Loading...";
        }
        if (!string.IsNullOrWhiteSpace(SiteId))
        {
            return "SiteId: " + SiteId;
        }
        if (!string.IsNullOrWhiteSpace(SiteCode))
        {
            return "SiteCode: " + SiteCode;
        }
        return "Unknown";
    }


    protected override async Task OnParametersSetAsync()
    {
        _site = null;
        _pageState = PageStateValue.Loading;
        bool pendingNavToSite = false;
        if (SiteId != null)
        {
            var site = await API.GetSite(SiteId);
            _site = site;
        }
        else if (SiteCode != null)
        {
            var site = await API.GetSiteByCode(SiteCode);
            if (site != null)
            {
                pendingNavToSite = true;
                NavigationManager.NavigateTo($"/GraphProfileConsumption/{site.Id}");
            }
        }
        else if (_site == null && SiteId == null)
        {
            var site = await API.GetLastSiteAccessed();
            if (site != null)
            {
                pendingNavToSite = true;
                NavigationManager.NavigateTo($"/GraphProfileConsumption/{site.Id}");
            }
        }

        if (_site != null)
        {

            var heatMap = await API.GetHeatAsync(_site.Id);
            var profile = new MeterDataLib.Query.MeterDataQuery.ProfileResult(heatMap);

            // Add traces
            var seasons = new List<Season> { Season.Winter, Season.Spring, Season.Summer, Season.Autumn };
            var daysOfWeek = new List<DayOfWeek> { DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday, DayOfWeek.Saturday, DayOfWeek.Sunday };
            this._data = new List<ITrace>() ;
            foreach (var season in seasons)
            {
                foreach (var dow in daysOfWeek)
                {
                    var trace = new Scatter
                        {
                            X = profile.X,
                            Y = profile.GetProfile(dayOfWeek: dow, season: season).Cast<object>().ToList(),
                            Fill = FillEnum.None,
                            Name = $"{season} {dow}"
                        };
                    this._data.Add(trace);
                }
            }
            _pageState = PageStateValue.Loaded;

        }
        else if(!pendingNavToSite)
        {
            NavigationManager.NavigateTo("/GettingStarted");
            _pageState = PageStateValue.Error;
        }

    }

 

}
