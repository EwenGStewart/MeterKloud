@page "/GraphProfileConsumption"
@page "/GraphProfileConsumption/{siteId}"
@inject MeterKloudClientApi API
@inject NavigationManager NavigationManager
@using Plotly.Blazor.LayoutLib.XAxisLib
@using Plotly.Blazor.Traces.ScatterLib
@using Site = MeterDataLib.Site;


<MudText Typo="Typo.h1">@SitesName()</MudText>

@if (_pageState == PageStateValue.Error)
{
    <MudAlert Icon="" Severity="Severity.Error">[8TSAL9] Error - could not load the requested site</MudAlert>

}
else if (_pageState == PageStateValue.Loading)
{
    <MudProgressCircular Indeterminate="true" />
}


<MudPaper Elevation="25" Height="90vh" Outlined>

    @if (_pageState == PageStateValue.Loaded)
    {
        <PlotlyChart @bind-Config="_config" @bind-Layout="_layout" @bind-Data="_data" @ref="_chart"   />
    }

</MudPaper>






@code {

    [Parameter]
    public string? SiteId { get; set; }

    [SupplyParameterFromQuery(Name = "Code")]
    public string? SiteCode { get; set; }

    Site? _site;
    PlotlyChart _chart = default!;
    IList<ITrace> _data = new List<ITrace>();
    Config _config = new Config();
    Layout _layout = new Layout();


    private enum PageStateValue
    {
        Loading,
        Loaded,
        Error
    }

    private PageStateValue _pageState = PageStateValue.Loading;


    public string SitesName()
    {
        if (_site != null)
        {
            if (!string.IsNullOrWhiteSpace(_site.Name) && !_site.Name.Equals(_site.Code, StringComparison.OrdinalIgnoreCase))
            {
                return $"Site:  {_site.Code} - {_site.Name}";
            }
            else
            {
                return $"Site:  {_site.Code}";
            }
        }
        if (_pageState == PageStateValue.Loading)
        {
            return "Loading...";
        }
        if (!string.IsNullOrWhiteSpace(SiteId))
        {
            return "SiteId: " + SiteId;
        }
        if (!string.IsNullOrWhiteSpace(SiteCode))
        {
            return "SiteCode: " + SiteCode;
        }
        return "Unknown";
    }


    protected override async Task OnParametersSetAsync()
    {
        _site = null;
        _pageState = PageStateValue.Loading;
        if (SiteId != null)
        {
            var site = await API.GetSite(SiteId);
            _site = site;
        }
        else if (SiteCode != null)
        {
            var site = await API.GetSiteByCode(SiteCode);
            if (site != null)
            {
                NavigationManager.NavigateTo($"/GraphProfileConsumption/{site.Id}");
            }
        }
        else if (_site == null && SiteId == null)
        {
            var site = await API.GetLastSiteAccessed();
            if (site != null)
            {
                NavigationManager.NavigateTo($"/GraphProfileConsumption/{site.Id}");
            }
        }

        if (_site != null)
        {

            var dailyTotals = await API.GetDetailedConsumption(_site.Id);
            var trace = new Scatter
                {
                    X = dailyTotals.X,
                    Y = dailyTotals.Y,
                    Fill =   FillEnum.ToZeroY,
                    Name = $"Net Consumption (kWh)"
                };
            this._data = new List<ITrace> { trace };
            this._layout = new Layout
                {
                    Title = new Plotly.Blazor.LayoutLib.Title() { Text = $"Consumption( kWh) by {dailyTotals.Interval}" },
                    XAxis = new[] {
                        new Plotly.Blazor.LayoutLib.XAxis    
                        {
                            Title = new Plotly.Blazor.LayoutLib.XAxisLib.Title() { Text = "Time" } ,
                            Type = Plotly.Blazor.LayoutLib.XAxisLib.TypeEnum.Date,
                            AutoRange =  Plotly.Blazor.LayoutLib.XAxisLib.AutoRangeEnum.False,
                            Range = new List<object> { dailyTotals.ActualDateRange.ExclusiveToDate.AddMonths(-1), dailyTotals.ActualDateRange.ExclusiveToDate },
                            RangeSelector = new RangeSelector 
                            {
                                Buttons = new List<Plotly.Blazor.LayoutLib.XAxisLib.RangeSelectorLib.Button>
                                {   new Plotly.Blazor.LayoutLib.XAxisLib.RangeSelectorLib.Button
                                    {
                                        Count = 1,
                                        Label = "1m",
                                        Step = Plotly.Blazor.LayoutLib.XAxisLib.RangeSelectorLib.ButtonLib.StepEnum.Month,
                                        StepMode = Plotly.Blazor.LayoutLib.XAxisLib.RangeSelectorLib.ButtonLib.StepModeEnum.Backward
                                    },
                                    new Plotly.Blazor.LayoutLib.XAxisLib.RangeSelectorLib.Button
                                    {
                                        Count = 6,
                                        Label = "6m",
                                        Step = Plotly.Blazor.LayoutLib.XAxisLib.RangeSelectorLib.ButtonLib.StepEnum.Month,
                                        StepMode = Plotly.Blazor.LayoutLib.XAxisLib.RangeSelectorLib.ButtonLib.StepModeEnum.Backward
                                    },
                                    new Plotly.Blazor.LayoutLib.XAxisLib.RangeSelectorLib.Button
                                    {
                                        Step =  Plotly.Blazor.LayoutLib.XAxisLib.RangeSelectorLib.ButtonLib.StepEnum.All
                                    }
                                }
                            },
                            RangeSlider = new RangeSlider
                            {
                                Visible = true,
                                Range = new List<object> { dailyTotals.ActualDateRange.FromDate, dailyTotals.ActualDateRange.ExclusiveToDate }
                            }

                        }
                    },
                    YAxis = new Plotly.Blazor.LayoutLib.YAxis[]
                    {
                        new Plotly.Blazor.LayoutLib.YAxis
                        {
                            Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title(){ Text= "Consumption (kWh)" },
                            Type =  Plotly.Blazor.LayoutLib.YAxisLib.TypeEnum.Linear ,
                            AutoRange = Plotly.Blazor.LayoutLib.YAxisLib.AutoRangeEnum.True, 
                            Range = new List<object> { dailyTotals.MinValue, dailyTotals.MaxValue }
                        }
                    }
                };

            _pageState = PageStateValue.Loaded;

        }
        else
        {
            _pageState = PageStateValue.Error;
        }

    }


    // Using of the interface IList is important for the event callback!

}
