@page "/download"
@inject MeterKloudClientApi API
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

@implements IDisposable
@using MeterDataLib.Export
@using MeterDataLib


<MudContainer Fixed Class="px-6 py-4" MaxWidth="MaxWidth.ExtraExtraLarge">

    <MudStack Spacing="0" Class="pb-4">
        <MudStack Row>
            <MudIcon Icon="@Icons.Material.Filled.CloudDownload" Size="Size.Large"></MudIcon>
            <MudText Typo="Typo.h1" Color="Color.Dark">Download Meter Data</MudText>
        </MudStack>

        <MudText Typo="Typo.h2" Class="mud-text-secondary">Download meter data in a variety of formats.</MudText>
    </MudStack>

    <MudPaper Outlined="false" Height="70vh" Elevation="0" Style="background-color:transparent">
        <MudForm Model="displayModel" Spacing="0">
            <MudGrid>
                <MudItem sm="12" md="4">
                    <MudPaper Class="pa-3 ma-3" Elevation="25">
                        <MudForm>
                            <MudStack Spacing="2" Row="false">
                                <MudCheckBox T="bool" @bind-Value="displayModel.MultiSite" Label="Multiple Sites" Color="Color.Tertiary" Size="Size.Medium"></MudCheckBox>

                                <MudSelect T="string" @bind-Value="displayModel.SelectedSite" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Site" Placeholder="select a site"
                                MultiSelection="displayModel.MultiSite">
                                    @if (displayModel.SiteNames.Any())
                                    {
                                        foreach (var site in displayModel.SiteNames)
                                        {

                                            <MudSelectItem T="string" Value="@site"></MudSelectItem>
                                        }
                                    }
                                    else
                                    {
                                        <MudSelectItem T="string" Value="string.Empty">No Sites Available</MudSelectItem>
                                    }
                                </MudSelect>

                                <MudCheckBox T="bool" @bind-Value="displayModel.ZipFile" Label="Zip each site as a separate file" Color="Color.Tertiary" Size="Size.Medium"></MudCheckBox>
                                <MudSelect T="string" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Format" @bind-Value=displayModel.ExportFormatName>
                                    @foreach (var item in displayModel.ExportFormats)
                                    {
                                        <MudSelectItem T="string" Value=@(item)></MudSelectItem>
                                    }
                                </MudSelect>



                                <MudSelect T="string" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Range" @bind-Value=displayModel.ExportPeriodName>
                                    @foreach (var item in displayModel.ExportPeriods)
                                    {
                                        <MudSelectItem T="string" Value=@(item)></MudSelectItem>
                                    }
                                </MudSelect>


                                <MudDateRangePicker @ref="_picker" Variant="Variant.Outlined" PickerVariant="@PickerVariant.Inline"
                                @bind-DateRange="@displayModel.DateRange" DateFormat="dd-MMM-yy" TitleDateFormat="dd-MMM-yy"
                                Margin="Margin.Dense" Label="Date Range" AutoClose=false ReadOnly=@(!displayModel.DateRangeEnabled)>
                                    <PickerActions>



                                        <div Class="mr-auto align-self-start">

                                            <MudButton Size="Size.Small" OnClick="SetLastYear">Last Year</MudButton>
                                            <MudButton Size="Size.Small" OnClick="SetLast2Years">Last 2 Years</MudButton>
                                            <MudButton Size="Size.Small" OnClick="SetLastMonth">Last Month</MudButton>
                                        </div>

                                        <MudButton OnClick="@(() => _picker.CloseAsync(false))">Cancel</MudButton>
                                        <MudButton Color="Color.Primary" OnClick="@(() => _picker.CloseAsync())">Ok</MudButton>
                                    </PickerActions>
                                </MudDateRangePicker>
                                <MudSelect Label="Interval" Variant="Variant.Outlined" Margin="Margin.Dense" Placeholder="True" T="int"
                                @bind-Value=displayModel.Interval>
                                    <MudSelectItem T="int" Value="0">Use the value stored by the meter</MudSelectItem>
                                    <MudSelectItem T="int" Value="30">30 minutes</MudSelectItem>
                                    <MudSelectItem T="int" Value="15">15 minutes</MudSelectItem>
                                    <MudSelectItem T="int" Value="5">5 minutes</MudSelectItem>
                                    <MudSelectItem T="int" Value="1">1 Minute</MudSelectItem>
                                </MudSelect>

                                <MudCheckBox @bind-Value=displayModel.IncludeHeader Size="Size.Medium" Color="Color.Tertiary" ReadOnly=@displayModel.IncludeHdrReadonly>Add Header</MudCheckBox>
                                <MudCheckBox @bind-Value=displayModel.IncludeSite T="bool" Size="Size.Medium" Color="Color.Tertiary" Readonly=@displayModel.IncludeSiteReadonly>Include Site Column</MudCheckBox>
                                <MudCheckBox @bind-Value=displayModel.IncludeMeter T="bool" Size="Size.Medium" Color="Color.Tertiary" ReadOnly=@displayModel.IncludeMeterReadonly>Meter Level</MudCheckBox>
                                <MudCheckBox @bind-Value=displayModel.IncludeChannel T="bool" Size="Size.Medium" Color="Color.Tertiary" ReadOnly=@displayModel.IncludeChannelReadonly>Channel Level</MudCheckBox>


                            </MudStack>


                        </MudForm>

                        <MudButton Disabled="@DownloadButtonDisabled()"
                        Variant="Variant.Filled"
                        EndIcon="@Icons.Material.Filled.ArrowDownward"
                        Color="Color.Info">
                            @if (_ExportInProgress)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            }
                            <MudText Class="ms-2">@(DownloadButtonText())</MudText>
                        </MudButton>
                    </MudPaper>


                </MudItem>
                <MudItem sm=12 md="8">
                    <MudPaper Class="pa-3 ma-3" Elevation="25">
                        <MudPaper Style="background-color:black; color:white; height:80vh; overflow:scroll">
                            <pre>
                                @((MarkupString)@_fileContents)
                            </pre>
                        </MudPaper>




                    </MudPaper>
                </MudItem>




            </MudGrid>

        </MudForm>


    </MudPaper>




</MudContainer>


@code {

    const string NoSitesAvailable = "No Sites Available";
    private const int MaxTextToDisplayInBrowser = 100000;
    private const int MillisecondsDelay = 300;
    private MudDateRangePicker _picker = default!;

    async Task SetLastYear()
    {
        _picker.DateRange.End = DateTime.Today.AddDays(-1);
        _picker.DateRange.Start = _picker.DateRange.End.Value.AddYears(-1);
        await _picker.CloseAsync();

    }
    async Task SetLast2Years()
    {
        _picker.DateRange.End = DateTime.Today.AddDays(-1);
        _picker.DateRange.Start = _picker.DateRange.End.Value.AddYears(-2);
        await _picker.CloseAsync();

    }
    async Task SetLastMonth()
    {
        _picker.DateRange.End = DateTime.Today.AddDays(-1);
        _picker.DateRange.Start = _picker.DateRange.End.Value.AddMonths(-1);
        await _picker.CloseAsync();

    }



    /* Display Model - value Fields */
    public bool _MultiSite = false;
    public string _SelectedSite = NoSitesAvailable;
    // default format Text
    string _exportFormatText = "NEM12";

    public DateRange _DateRange = new DateRange(DateTime.Today.AddYears(-1), DateTime.Today.AddDays(-1));
    public int _Interval = 0;
    public bool _IncludeHeader = true;
    public bool _IncludeSite = true;
    public bool _IncludeChannel = true;
    public bool _IncludeMeter = true;


    /* display model - field that impact the display */

    bool _ShowDataPreview = true;
    string _dataDownload = string.Empty;
    string _fileContents = "File contents will appear here";

    /* progress */
    CancellationTokenSource? _cts = null;
    bool _ExportInProgress = false;
    bool _inputIsValid = false;

    DownloadDisplayModel displayModel = default!;

    class DownloadDisplayModel
    {
        private readonly MeterKloudClientApi _api;
        private readonly Dictionary<string, Site> _sites;
        static readonly Dictionary<string, ExportFormat> exportFormatNames = new Dictionary<string, ExportFormat> { { "NEM12", ExportFormat.NEM12 }, { "Quadrant CSV", ExportFormat.QuadrantCSV }, { "Columnar CSV", ExportFormat.ColumnarCSV }, { "Row CSV", ExportFormat.RowCSV } };




        bool _IncludeHdrReadonly = true;
        bool _IncludeSiteReadonly = true;
        bool _IncludeMeterReadonly = true;
        bool _IncludeChannelReadonly = true;

        public enum ExportPeriod
        {
            LastYearOfSiteData,
            Last2YearsOfSiteData,
            Last6MonthsOfSiteData,
            Last3MonthsOfSiteData,
            LastMonthOfSiteData,
            Last12CalendarMonths,
            Last6CalendarMonths,
            Last3CalendarMonths,
            LastMonth,
            CustomDateRange
        }
        static readonly Dictionary<string, ExportPeriod> exportPeriodNames = new Dictionary<string, ExportPeriod> { { "Last year of Site Data", ExportPeriod.LastYearOfSiteData }, { "Last 2 years of Site Data", ExportPeriod.Last2YearsOfSiteData }, { "Last 6 months of Site Data", ExportPeriod.Last6MonthsOfSiteData }, { "Last 3 months of Site Data", ExportPeriod.Last3MonthsOfSiteData }, { "Last month of Site Data", ExportPeriod.LastMonthOfSiteData }, { "Last 12 calendar months", ExportPeriod.Last12CalendarMonths }, { "Last 6 calendar months", ExportPeriod.Last6CalendarMonths }, { "Last 3 calendar months", ExportPeriod.Last3CalendarMonths }, { "Last month", ExportPeriod.LastMonth }, { "Custom Date Range", ExportPeriod.CustomDateRange } };



        public DownloadDisplayModel(MeterKloudClientApi api)
        {
            _api = api;
            var list = (_api.GetSites()).GetAwaiter().GetResult();
            if (list.Any())
            {
                //create dictionary of sites
                _sites = list.ToDictionary(site => site.Code.ToUpperInvariant(), site => site);
            }
            else
            {
                _sites = new Dictionary<string, Site>();
            }

            // get the last site accessed
            var lastSite = (_api.GetLastSiteAccessed()).GetAwaiter().GetResult();
            if (lastSite != null)
            {
                if (_sites.ContainsKey(lastSite.Code))
                {
                    SelectedSite = lastSite.Code.ToUpperInvariant();
                }
            }
            this.ExportFormatName = exportFormatNames.First().Key;


        }

        public bool MultiSiteEnabled => _sites.Count > 1;
        public bool MultiSiteDisabled => !MultiSiteEnabled;
        private bool _multiSite = false;

        public bool MultiSite
        {
            get
            {
                if (!MultiSiteEnabled)
                {
                    return false;
                }
                return _multiSite;
            }
            set
            {
                _multiSite = value;
                if (!_multiSite && SelectedSite.IndexOf(',') >= 0)
                {
                    SelectedSite = FirstSite().Code;

                }




            }
        }

        public IEnumerable<string> SiteNames => _sites.Keys;



        public Site FirstSite()
        {
            var firstSite = SelectedSiteList().FirstOrDefault() ?? new Site(); ;

            return firstSite;
        }


        private string _selectedSite = string.Empty;
        public string SelectedSite
        {
            get { return _selectedSite; }
            set
            {
                _selectedSite = value;
                SetDateRange();
            }
        }






        public List<Site> SelectedSiteList()
        {
            if (string.IsNullOrWhiteSpace(SelectedSite))
            {
                return new List<Site>();
            }
            var stringList = _selectedSite.ToUpperInvariant().Split(',', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
            return stringList.Where(xxxx => _sites.ContainsKey(xxxx)).Select(siteCode => _sites[siteCode]).ToList();
        }



        private bool _zipFile;

        public bool ZipFileEnabled => MultiSite && SelectedSiteList().Count > 1;

        public bool ZipFile
        {
            get
            {
                if (!ZipFileEnabled)
                {
                    return false;
                }
                return _zipFile;

            }
            set { _zipFile = value; }
        }



        public List<string> ExportFormats => exportFormatNames.Keys.ToList();
        private ExportFormat _exportFormat = MeterDataLib.Export.ExportFormat.NEM12;
        public string ExportFormatName
        {
            get
            {
                var item = exportFormatNames.FirstOrDefault(xxx => xxx.Value == _exportFormat);
                if (item.Equals(default(KeyValuePair<string, ExportFormat>)))
                {
                    return exportFormatNames.First().Key;
                }
                return item.Key;

            }
            set
            {
                // validate the value
                if (exportFormatNames.ContainsKey(value))
                {
                    _exportFormat = exportFormatNames[value];
                    SetOptionsFromFormat();
                }
            }
        }



        public List<string> ExportPeriods => exportPeriodNames.Keys.ToList();
        private ExportPeriod _exportPeriod = ExportPeriod.LastYearOfSiteData;
        public string ExportPeriodName
        {
            get
            {
                var item = exportPeriodNames.FirstOrDefault(xxx => xxx.Value == _exportPeriod);
                if (item.Equals(default(KeyValuePair<string, ExportPeriod>)))
                {
                    return exportPeriodNames.First().Key;
                }
                return item.Key;

            }
            set
            {
                // validate the value
                if (exportPeriodNames.ContainsKey(value))
                {
                    _exportPeriod = exportPeriodNames[value];
                    SetDateRange();
                }
            }
        }

        public bool DateRangeEnabled => _exportPeriod == ExportPeriod.CustomDateRange;

        private void SetDateRange()
        {

            DateTime lastLastDay = SelectedSiteList().Any() ? SelectedSiteList().Max(site => site.LastDay) : DateTime.Today.AddDays(-1);
            DateTime firstLastDay = SelectedSiteList().Any() ? SelectedSiteList().Min(site => site.LastDay) : DateTime.Today.AddDays(-1);
            switch (_exportPeriod)
            {
                case ExportPeriod.LastYearOfSiteData:
                    DateRange = new DateRange(firstLastDay.AddYears(-1), lastLastDay);
                    break;
                case ExportPeriod.Last2YearsOfSiteData:
                    DateRange = new DateRange(firstLastDay.AddYears(-2), lastLastDay);
                    break;
                case ExportPeriod.Last6MonthsOfSiteData:
                    DateRange = new DateRange(firstLastDay.AddMonths(-6), lastLastDay);
                    break;
                case ExportPeriod.Last3MonthsOfSiteData:
                    DateRange = new DateRange(firstLastDay.AddMonths(-3), lastLastDay);
                    break;
                case ExportPeriod.LastMonthOfSiteData:
                    DateRange = new DateRange(firstLastDay.AddMonths(-1), lastLastDay);
                    break;
                case ExportPeriod.Last12CalendarMonths:
                    DateRange = new DateRange(DateTime.Today.AddMonths(-12), DateTime.Today.AddDays(-1));
                    break;
                case ExportPeriod.Last6CalendarMonths:
                    DateRange = new DateRange(DateTime.Today.AddMonths(-6), DateTime.Today.AddDays(-1));
                    break;
                case ExportPeriod.Last3CalendarMonths:
                    DateRange = new DateRange(DateTime.Today.AddMonths(-3), DateTime.Today.AddDays(-1));
                    break;
                case ExportPeriod.LastMonth:
                    DateRange = new DateRange(DateTime.Today.AddMonths(-1), DateTime.Today.AddDays(-1));
                    break;
                case ExportPeriod.CustomDateRange:

                    break;
            }
        }


        private DateRange _dateRange = new DateRange(DateTime.Today.AddYears(-1), DateTime.Today.AddDays(-1));
        public DateRange DateRange
        {
            get { return _dateRange; }
            set { _dateRange = value; }
        }

        private int _interval = 0;
        public int Interval
        {
            get { return _interval; }
            set { _interval = value; }
        }


        public bool IncludeHdrReadonly => _IncludeHdrReadonly;
        public bool IncludeSiteReadonly => _IncludeSiteReadonly;
        public bool IncludeMeterReadonly => _IncludeMeterReadonly;
        public bool IncludeChannelReadonly => _IncludeChannelReadonly;

        private bool _includeHeader = true;
        public bool IncludeHeader
        {
            get { return _includeHeader; }
            set { if (IncludeHdrReadonly) return; _includeHeader = value; }
        }

        private bool _includeSite = true;
        public bool IncludeSite
        {
            get { return _includeSite; }
            set { if (IncludeSiteReadonly) return; _includeSite = value; }
        }

        private bool _includeChannel = true;
        public bool IncludeChannel
        {
            get { return _includeChannel; }
            set { if (IncludeChannelReadonly) return; _includeChannel = value; }
        }

        private bool _includeMeter = true;
        public bool IncludeMeter
        {
            get { return _includeMeter; }
            set { if (IncludeMeterReadonly) return; _includeMeter = value; }
        }


        void SetOptionsFromFormat()
        {

            Console.WriteLine("set options from format " + _exportFormat);
            switch (_exportFormat)
            {
                case ExportFormat.NEM12:
                    _includeHeader = true;
                    _IncludeHdrReadonly = false;

                    _IncludeSiteReadonly = true;
                    _includeSite = true;

                    _includeChannel = true;
                    _IncludeChannelReadonly = true;

                    _includeMeter = true;
                    _IncludeMeterReadonly = true;

                    break;
                case ExportFormat.QuadrantCSV:

                    _includeHeader = true;
                    _IncludeHdrReadonly = false;

                    _includeSite = false;
                    _IncludeSiteReadonly = false;

                    _includeChannel = true;
                    _IncludeChannelReadonly = true;

                    _includeMeter = false;
                    _IncludeMeterReadonly = false;


                    break;
                case ExportFormat.ColumnarCSV:
                    _includeHeader = true;
                    _IncludeHdrReadonly = false;

                    _includeSite = false;
                    _IncludeSiteReadonly = false;

                    _includeChannel = true;
                    _IncludeChannelReadonly = true;

                    _includeMeter = false;
                    _IncludeMeterReadonly = false;



                    break;
                case ExportFormat.RowCSV:
                    _includeHeader = true;
                    _IncludeHdrReadonly = false;

                    _includeSite = false;
                    _IncludeSiteReadonly = false;

                    _includeChannel = true;
                    _IncludeChannelReadonly = true;

                    _includeMeter = false;
                    _IncludeMeterReadonly = false;
                    break;

            }
        }


    }





    protected override void OnInitialized()
    {
        base.OnInitialized();
        displayModel = new DownloadDisplayModel(API);


    }







    public bool DownloadButtonDisabled()
    {
        if (!_inputIsValid) return true;
        if (_ExportInProgress) return true;
        if (string.IsNullOrWhiteSpace(_SelectedSite)) return true;
        return false;
    }


    public string DownloadButtonText()
    {
        if (_ExportInProgress) return "Creating file...";
        if (string.IsNullOrWhiteSpace(_SelectedSite)) return "Enter a site";
        return "Download";
    }






    public void Dispose()
    {

        if (_cts != null)
        {
            _cts.Cancel();
            _cts.Dispose();
            _cts = null;
        }
    }
}
