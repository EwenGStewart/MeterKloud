@inject ISnackbar Snackbar

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   @ref="@_fileUpload"
                   
                   AppendMultipleFiles=@false
                   Hidden="@false"
                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                   InputStyle="opacity:0"
                   Accept=".csv, .xlsx, .zip, .txt "
                   Files="@_files"
                   FilesChanged="FilesChanged"
                   MaximumFileCount="10"
                   tabindex="-1"
                   @ondrop="@ClearDragClass"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ActivatorContent>
            <MudPaper Height="300px"
                      Outlined="true"
                      Class="@_dragClass">
                <MudText Typo="Typo.h6">
                    Drag and drop files here or click to open file picker
                </MudText>
                @foreach (var file in _fileNames)
                {
                    <MudChip T="string"
                             Color="Color.Dark"
                             Text="@file"
                             tabindex="-1" />
                }
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>
    @if (!string.IsNullOrEmpty(_error))
    {
        <MudAlert Severity="Severity.Error">
            @_error
        </MudAlert>
    }

    <MudToolBar Gutters="@false"
                Class="relative d-flex gap-4">
        <MudSpacer />

        <MudButton Color="Color.Primary"
                   OnClick="@OpenFilePickerAsync"
                   Variant="Variant.Filled">
            Open file picker
        </MudButton>
    </MudToolBar>
    <MudAlert Severity="Severity.Info">
        Accepted files are CSV , Excel, or Zip. Many formats can be used including NEM12.  The max selected file size is 1GB, the max file count is 10
    </MudAlert>
</MudStack>

@code {
    [Parameter]
    public EventCallback<IReadOnlyList<IBrowserFile>> OnFilesSelected { get; set; }


    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private readonly List<string> _fileNames = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;
    private IReadOnlyList<IBrowserFile> _files = new List<IBrowserFile>();
    private string _error = string.Empty;
    const long maxFileSize = 1000 * 1000 * 1024; // 1GB

    // private async Task ClearAsync()
    // {
    //     _error = string.Empty;
    //     try
    //     {
    //         await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
    //     }
    //     catch (Exception ex)
    //     {
    //         _error = ex.Message;
    //     }

    //     _fileNames.Clear();
    //     ClearDragClass();
    // }

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    // private void OnInputFileChanged(InputFileChangeEventArgs e)
    // {
    //     try
    //     {
    //         _error = string.Empty;
    //         Console.WriteLine("OnInputFileChanged");
    //         ClearDragClass();
    //         var files = e.GetMultipleFiles();
    //         foreach (var file in files)
    //         {
    //             _fileNames.Add(file.Name);
    //         }
    //         Console.WriteLine($"files count {_files.Count}");
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"Error loading files {ex.Message}");
    //         _error = ex.Message;
    //     }

    // }

    private async Task FilesChanged(IReadOnlyList<IBrowserFile> files)
    {
        try
        {

            Console.WriteLine("FILES CHANGED");
            _files = files;
            await OnFilesSelected.InvokeAsync(_files);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading files {ex.Message}");
            _error = ex.Message;
        }
    }

    // private async Task Upload()
    // {

    //     if (_files.Any())
    //     {
    //         if (_files.Count > 10)
    //         {
    //             Snackbar.Add("Maximum of 10 files can be uploaded", Severity.Error);
    //             return;
    //         }
    //         foreach (var file in _files)
    //         {
    //             if (file.Size > 1000 * 1000 * 1024)
    //             {
    //                 Snackbar.Add($"Maximum file size is 1GB - file {file.Name} is larger than this.", Severity.Error);
    //                 return;
    //             }

    //         }

    //         await OnFilesSelected.InvokeAsync(_files);
    //     }
    //     else
    //     {
    //         Snackbar.Add("No files to upload", Severity.Error);
    //     }



    // }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;


    // private async Task Debug()
    // {
    //     Console.WriteLine("Debug");
    //     foreach (var file in _files)
    //     {
    //         Console.WriteLine(file.Name);
    //         try
    //         {
    //             using (var stream = file.OpenReadStream(maxFileSize))
    //             {
    //                 var buffer = new byte[stream.Length];
    //                 await stream.ReadAsync(buffer, 0, buffer.Length);

    //                 Console.WriteLine($"File {file.Name} loaded ");
    //             }
    //         }
    //         catch (Exception ex)
    //         {
    //             Console.WriteLine($"Error loading file {file.Name} {ex.Message}");
    //         }

    //     }
    //     return;
    // }
}
